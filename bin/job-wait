#!/usr/bin/env python
#Created by Sam Gleske
#Wed Jan 18 23:10:33 PST 2017
#Ubuntu 16.04.1 LTS
#Linux 4.4.0-59-generic x86_64
#Python 2.7.12
#Reads Jenkins job API and will wait until a job is finished.
#Optionally prints out console log when build is finished.
#Exits non-zero if failed build or zero if success.

import argparse
import base64
import json
import os
import ssl
import sys
import time
import urllib2
from httplib import HTTPSConnection

parser = argparse.ArgumentParser(description="Reads Jenkins job API and will wait until a job is finished.  Useful for notifying when a job is finished (e.g. a speaking command like say or espeak).", epilog="""
environment variables:
  JENKINS_WEB           Root URL to a Jenkins server.  See also -s.
  JENKINS_USER          Username to authenticate with Jenkins.
  JENKINS_PASSWORD      Password to authenticate with Jenkins.

exit status:
  0                     SUCCESS job run.
  1                     Any job run status other than SUCCESS.
""", formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('--curl', action='store_true', dest='print_curl', help='Print a formatted curl command for debugging and exit.')
parser.add_argument('-a, --automatic-jenkins-server', action='store_true', dest='auto_jenkins_web', help='Automatically determine the Jenkins root based off of JENKINS_JOB url.  This option ignores -s.')
parser.add_argument('-c, --ca-file', default=None, metavar='CERT_PEM', dest='pinned_cert', help='Path to pinned CA chain in PEM format.  Can be self signed to guarantee secure connection.')
parser.add_argument('-d, --print-duration', action='store_true', dest='print_duration', help='When the job is finished print the duration.')
parser.add_argument('-f, --print-failed-console', action='store_true', dest='print_failed_console', help='When the job is finished print the console output only if the job failed.')
parser.add_argument('-p, --print-console-output', action='store_true', dest='print_console_output', help='When the job is finished print the console output.')
parser.add_argument('-s, --jenkins-server', default=os.getenv('JENKINS_WEB', 'http://localhost:8080/'), metavar='JENKINS_WEB', dest='jenkins_web', help='Root web URL for the Jenkins server.  It can also be set via JENKINS_WEB environment variable.')
parser.add_argument('JENKINS_JOB', help='The URL to an in-progress (or completed) job build number for querying the API about its status.')
args = parser.parse_args()

def trim_url_slash(url):
    return url[:-1] if url[-1:] == '/' else url

def getUrl(url, headers):
    if url.startswith('https'):
        #https://docs.python.org/3/library/ssl.html#ssl-security
        context = ssl.create_default_context()
        if args.pinned_cert:
            context.load_verify_locations(cafile=args.pinned_cert)
        else:
            context.load_default_certs()
        req = urllib2.Request(url, headers=headers)
        urlconn = urllib2.urlopen(req, context=context)
    else:
        req = urllib2.Request(url=url, headers=headers)
        urlconn = urllib2.urlopen(req)
    responseString = urlconn.read()
    urlconn.close()
    return responseString

def getJSONUrl(url, headers):
    if not url.endswith('/api/json'):
        url = url + '/api/json'
    response = json.loads(getUrl(url, headers))
    return response

#build credentials
username=os.getenv('JENKINS_USER')
password=os.getenv('JENKINS_PASSWORD')

headers = {
    'Accept': 'application/json',
    'Accept-Encoding': '',
    'Connection': 'close',
    'Host': args.jenkins_web.split('/')[2].split(':')[0]
}
if not username == None:
    print "Logging in as user %s." % username
    headers['Authorization'] = "Basic %s" % base64.b64encode("%s:%s" % (username, password)).decode('ascii')

if args.print_curl:
    curl='curl'
    if args.pinned_cert:
        curl += ' --cacert %s' % args.pinned_cert
    for k,v in headers.items():
        curl += " -H '%s:%s'" % (k, v)
    print curl, '%s/api/json' % trim_url_slash(args.jenkins_web)
    exit(1)


#complete arguments for use
jenkins_job = trim_url_slash(args.JENKINS_JOB)
jenkins_web = ''
jenkins_root_api_response = {}
if args.auto_jenkins_web:
    print "Automatically resolving JENKINS_WEB."
    jenkins_web = jenkins_job
    while len(jenkins_web.split('/')) > 3:
        jenkins_web = '/'.join(jenkins_web.split('/')[:-1])
        if jenkins_web.split('/')[-1] in ['job', 'view']:
            continue
        jenkins_root_api_response = getJSONUrl(jenkins_web + '/api/json', headers)
        if 'useCrumbs' in jenkins_root_api_response:
            break
else:
    jenkins_web = trim_url_slash(args.jenkins_web)
    if not jenkins_job.startswith(jenkins_web):
        print "ERROR: JENKINS_JOB does not start with JENKINS_WEB.  See --help for -s or -a."
        sys.exit(2)
    jenkins_root_api_response = getJSONUrl(jenkins_web + '/api/json', headers)

print "Detect CSRF protection."
if jenkins_root_api_response['useCrumbs']:
    print "CSRF protection enabled."
    csrf_crumb = getJSONUrl(jenkins_web + '/crumbIssuer', headers)
    headers[csrf_crumb["crumbRequestField"]] = csrf_crumb["crumb"]
else:
    print "CSRF protection disabled."

#wait for the job to finish
response = {}
print "Checking build %s" % jenkins_job
while True:
    response = getJSONUrl(jenkins_job, headers)
    if not response['building']:
        break
    time.sleep(3)
    print "Waiting for build to finish..."

#print console
if args.print_console_output or ( args.print_failed_console and 'SUCCESS' != response['result'] ):
    print getUrl(jenkins_job + '/consoleText', headers)

#print duration
if args.print_duration:
    duration = response['duration'] / 1000
    hours = duration / 3600
    duration = duration % 3600
    minutes = duration / 60
    seconds = duration % 60
    if hours > 0:
        print "Duration: {} hours {} minutes {} seconds".format(hours, minutes, seconds)
    elif minutes > 0:
        print "Duration: {} minutes {} seconds".format(minutes, seconds)
    else:
        print "Duration: {} seconds".format(seconds)

STATUS = 0
if 'SUCCESS' != response['result']:
    print "Non-success status detected: %s" % response['result']
    STATUS = 1
else:
    print 'SUCCESS'
sys.exit(STATUS)
