#!/bin/bash
#Sam Gleske
#Ubuntu 16.04.1 LTS
#Linux 4.4.0-47-generic x86_64
#Python 2.7.12
#GNU bash, version 4.3.46(1)-release (x86_64-pc-linux-gnu)
#Convert an IP to binary.

function ipnetmask() {
#arg $1 should be a fully expanded string of a binary ip address
#e.g. 11000000.10101000.00001010.00000001
#arg $2 should be a fully expanded string of a binary netmask
#e.g. 11111111.11111111.11111110.00000000 (/23 netmask)
python -c '
from sys import argv
from sys import stdout
output = ""
for (x, y) in zip(argv[1], argv[2]):
    if y in ("1", "."):
        output += x
    else:
        output += y
stdout.write(output)
stdout.flush()
' $@
}

for ip in "$@";do
  #not an IP address so break out
  if ! grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}' <<< "${ip}" > /dev/null && ! grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}' <<< "${ip}" > /dev/null; then
    continue
  fi
  network_address=false
  network_bits=32
  original="${ip}"
  if grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}' <<< "${ip}" > /dev/null; then
    network_address=true
  fi
  if ${network_address}; then
    network_bits=${ip##*/}
    ip=${ip%%/*}
  fi
  ip_address=$(
    bc <<< "obase=2;$(tr '.' ';' <<< "$ip")" | while read octet; do
      printf "%08d." ${octet}
    done
  )
  netmask=$(
    count=1
    for x in $(eval "echo {1..${network_bits}}");do
      echo -n 1
      [ "$((count % 8))" -eq 0 ] && echo -n '.'
      (( count++ ))
    done
    while [ ${count} -lt 33 ]; do
      echo -n 0
      [ "$((count % 8))" -eq 0 ] && echo -n '.'
      (( count++ ))
    done
  )
  ip_address=${ip_address%.}
  netmask=${netmask%.}
  ipnetmask $ip_address $netmask
  echo " (${original})"
done
