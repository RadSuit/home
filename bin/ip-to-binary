#!/usr/bin/env python
#Sam Gleske
#Ubuntu 16.04.1 LTS
#Linux 4.4.0-47-generic x86_64
#Python 2.7.12
#GNU bash, version 4.3.46(1)-release (x86_64-pc-linux-gnu)
#Convert an IP to binary.

from sys import argv
import re

ip_to_binary = lambda ip: "".join(["{0:08b}".format(int(octet)) for octet in ip.split('.')])
display_ip = lambda binary: '.'.join([binary[i:i+8] for i in range(0, len(binary), 8)])
apply_netmask = lambda binary, mask: binary[0:int(mask)] + '0' * (32 - int(mask))
is_ip = lambda ip: bool(re.match('^([0-9]+\.){3}[0-9]+(/[0-9]+)?$', ip))
ip_with_netmask = lambda ip, mask: apply_netmask(ip_to_binary(ip), mask)

def printhelp():
    helptext = '\n'.join([
        "Pass IP addresses or IPs with network masks in CIDR format as arguments.",
        "Examples:",
        "    192.168.10.1",
        "    10.32.11.5/16"])
    print(helptext)

if len(argv) < 2:
    printhelp()

for ip in argv[1:]:
    if not is_ip(ip):
        continue
    if '/' in ip:
        result = ip_with_netmask(*ip.split('/'))
    else:
        result = ip_to_binary(ip)
    print("%s (%s)" % (display_ip(result), ip))
