# SET UP SOME COMMON ALIASES
if ! which vim &> /dev/null; then
  alias vim="vi"
fi
#Mac specific aliases
if uname -rms | grep Darwin &> /dev/null; then
  alias flushdns='dscacheutil -flushcache'
  alias l.='ls -Gd .*'
  alias ll='ls -Gl'
  alias ls='ls -G'
  alias g=/usr/local/bin/git
  alias git=/usr/local/bin/git
  export PATH="/usr/local/bin:/usr/local/sbin:${PATH}"
else
  #aliases that don't work on Mac
  alias l.='ls -d .* --color=auto'
  alias ll='ls -l --color=auto'
  alias ls='ls --color=auto'
  alias g='git'
fi
alias rspec='rspec --color --format nested'
#alias ...='while read line; do echo -n "."; done && echo ""'
alias ...='spinner.py'
alias x='exit'
alias startproxy='while true;do ssh -vND 1080 home; echo "press ctrl+c again to quit.";sleep 3;done'
#run last command as sudo
alias please='eval "sudo $(history -p !!)"'
alias Damnit,='sudo'
alias ..='cd ../'
alias ..2='cd ../../'
alias ..3='cd ../../../'
alias ..4='cd ../../../../'
alias ..5='cd ../../../../../'
alias socks='ssh -ND 1080'
if ! type -p pbcopy &> /dev/null; then
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

# ENVIRONMENT VARIABLES
if echo "${PATH}" | grep -v "$HOME/bin" &> /dev/null; then
  export PATH="$HOME/bin:${PATH}"
fi
if echo "${PATH}" | grep -v "$HOME/usr/bin" &> /dev/null; then
  #~/usr/bin is before ~/bin
  export PATH="$HOME/usr/bin:${PATH}"
fi
if echo "${PYTHONPATH}" | grep -v "$HOME/usr/lib/python2.7/site-packages" &> /dev/null; then
  export PYTHONPATH="$HOME/usr/lib/python2.7/site-packages"
fi
if echo "$PKG_CONFIG_PATH" | grep -v "$HOME/usr/lib/pkgconfig" &> /dev/null; then
  export PKG_CONFIG_PATH="$HOME/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"
fi
if echo "$MANPATH" | grep -v "$HOME/usr/share/man" &> /dev/null; then
  export MANPATH="$HOME/usr/share/man:${MANPATH}"
fi
if echo "$CPATH" | grep -v "$HOME/usr/include" &> /dev/null; then
  export CPATH="$HOME/usr/include:${CPATH}"
fi
if echo "$LD_LIBRARY_PATH" | grep -v "$HOME/usr/lib" &> /dev/null; then
  export LD_LIBRARY_PATH="$HOME/usr/lib:${LD_LIBRARY_PATH}"
fi

####################
# FANCY PS1
####################
function fancy_sadface() {
  # happy face if last command successful or sadface if last command failed
  if [ "$1" -eq 0 ]; then
    echo $'\e[33m^_^\e[0m'
  else
    echo $'\e[31mO_O\e[0m'
  fi
}
function fancy_git() {
  # output "*" if uncommitted changes or unstaged changes
  # output "+" if there are files which are not ignored and not added to git
  # output the current branch or commit (if detached head)
  if git rev-parse --git-dir &> /dev/null; then
    if ! git diff --quiet || ! git diff --cached --quiet; then
      echo -n $'\e[36m*\e[0m'
    fi
    if git ls-files --other --exclude-standard --directory 2> /dev/null | head -n1 | grep '[a-z]' > /dev/null; then
      echo -n $'\e[36m+\e[0m'
    fi
    echo -n $'\e[36m'
    git symbolic-ref --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null
  fi
}
function fancy_newline() {
  # output a newline if the current working directory spans more characters than 1/3 terminal width
  if [[ ${#PWD} -gt $(tput cols)/3 ]]; then
    echo $'\n\r'
  fi
}
export PS1="\$(fancy_sadface \$?)[\h|\$(fancy_git)\e[0m:\e[33m\w\e[0m]\$(fancy_newline)\\$ "
####################
# END FANCY PS1
####################

export EDITOR="vim"
if [ ! -z "${SUDO_USER}" -a "$(id -u)" -eq "0" ]; then
  export HOME="/root"
  export HISTFILE="$HOME/.bash_history"
  export MAIL="/var/spool/mail/root"
fi
export HISTIGNORE="&:ls:[bf]g:exit:history:history2"
export HISTCONTROL="ignorespace:ignoredups:&:ls:[bf]g:exit:history:history2"
export HISTFILESIZE=5000
export HISTSIZE=5000
#preserve all bash history
if [ ! -d "${HOME}/.bash_history_dir" ]; then
  mkdir "${HOME}/.bash_history_dir"
fi
export HISTFILE="${HOME}/.bash_history_dir/bash_history_$(date +%Y-%m-%d-%s)"
function history2() {
  find ~/.bash_history_dir -maxdepth 1 -type f -exec cat {} +
}

# SHELL OPTIONS
shopt -s cmdhist
set -o vi

#
# setup ssh-agent
#
#start running ssh-agent if it is not already.
#unset SSH_AUTH_SOCK SSH_AGENT_PID
if [ ! 'root' = "${USER}" -a ! -e '/vagrant' ]; then
  if ! pgrep ssh-agent &> /dev/null && ! uname -rms | grep Darwin &> /dev/null; then
    eval "$(ssh-agent -t 3600)" > /dev/null
  fi
  if ! uname -rms | grep Darwin &> /dev/null; then
    #Mac is a special little snow flake
    #SSH_AUTH_SOCK="$(lsof -p "$(pgrep ssh-agent | tr '\n' ',')" | grep "${USER}" | grep -e "launch-.*/Listeners" | tr ' ' '\n' | tail -n1)"
    #SSH_AGENT_PID="$(pgrep ssh-agent | head -n1 )"
  #else
    if [ -z "${SSH_AUTH_SOCK}" -o -z "${SSH_AGENT_PID}" ]; then
        #first time failed so try again.
        SSH_AUTH_SOCK="$(ls -l /tmp/ssh-*/agent.* 2> /dev/null | grep "${USER}" | awk '{print $9}' | tail -n1)"
        SSH_AGENT_PID="$(echo "${SSH_AUTH_SOCK}" | cut -d. -f2)"
    fi
    if [ -z "${SSH_AUTH_SOCK}" -o -z "${SSH_AGENT_PID}" ]; then
      SSH_AUTH_SOCK="$(lsof -p "$(pgrep ssh-agent | tr '\n' ',')" | grep "${USER}" | grep -e "ssh-[^/]*/agent\.[0-9]\+$" | tr ' ' '\n' | tail -n1)"
      SSH_AGENT_PID="$(echo "${SSH_AUTH_SOCK}" | cut -d. -f2)"
    fi
  fi
  [ -n "${SSH_AUTH_SOCK}" ] && export SSH_AUTH_SOCK
  [ -n "${SSH_AGENT_PID}" ] && export SSH_AGENT_PID
fi

export recipient_list=7257E65F

function retrygit() (
  if [ ! "$#" -eq '2' ]; then
    echo 'retrygit must have two args. e.g. retrygit remote branch'
    return 1
  fi
  while ! git push "$1" -u "$2";do sleep 1;done;say "Git pushed."
)

function LogJenkinsIsUp() {
  pytailuntil.py "$1" 'Jenkins is fully up and running'
}

#modified from https://wiki.archlinux.org/index.php/Streaming_using_twitch.tv
function twitch() {
  if ! type -p ffmpeg &> /dev/null; then
    echo "Missing ffmpeg package." 1>&2
    return 1
  fi
  TWITCH_INRES="${TWITCH_INRES:-1920x1080}" # input resolution
  TWITCH_OUTRES="${TWITCH_OUTRES:-1920x1080}" # output resolution
  TWITCH_FPS="${TWITCH_FPS:-15}" # target FPS
  TWITCH_GOP="${TWITCH_GOP:-30}" # i-frame interval, should be double of FPS,
  TWITCH_GOPMIN="${TWITCH_GOPMIN:-15}" # min i-frame interval, should be equal to fps,
  TWITCH_THREADS="${TWITCH_THREADS:-2}" # max 6
  TWITCH_CBR="${TWITCH_CBR:-1000k}" # constant bitrate (should be between 1000k - 3000k)
  TWITCH_QUALITY="${TWITCH_QUALITY:-ultrafast}"  # one of the many FFMPEG preset
  TWITCH_AUDIO_RATE="${TWITCH_AUDIO_RATE:-44100}"
  TWITCH_STREAM_KEY="${1:-${TWITCH_STREAM_KEY}}" # use the terminal command Streaming streamkeyhere to stream your video to twitch or justin
  TWITCH_SERVER="${TWITCH_SERVER:-live-lax}" # twitch server in Los Angeles
  TWITCH_AUDIO_DRIVER="${TWITCH_AUDIO_DRIVER:-pulse}"
  #find devices using ffmpeg -sources ${TWITCH_AUDIO_DRIVER}
  TWITCH_AUDIO_DEVICE="${TWITCH_AUDIO_DEVICE:-alsa_output.usb-Audioengine_Audioengine_2_-00.analog-stereo.monitor}"

  ffmpeg -f x11grab -s "${TWITCH_INRES}" -r "${TWITCH_FPS}" -i :0.0 -f "${TWITCH_AUDIO_DRIVER}" -i "${TWITCH_AUDIO_DEVICE}" -f flv -ac 2 -ar "${TWITCH_AUDIO_RATE}" \
    -vcodec libx264 -g "${TWITCH_GOP}" -keyint_min "${TWITCH_GOPMIN}" -b:v "${TWITCH_CBR}" -minrate "${TWITCH_CBR}" -maxrate "${TWITCH_CBR}" -pix_fmt yuv420p \
    -s "${TWITCH_OUTRES}" -preset "${TWITCH_QUALITY}" -tune film -acodec libmp3lame -threads "${TWITCH_THREADS}" -strict normal \
    -bufsize "${TWITCH_CBR}" "rtmp://${TWITCH_SERVER}.twitch.tv/app/${TWITCH_STREAM_KEY}"
}

export JENKINS_HEADERS_FILE=~/.jenkins-headers.json
